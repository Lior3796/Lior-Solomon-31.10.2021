{"version":3,"sources":["redux/Actions/types.js","logo.svg","components/features/toggleTheme/ToggleTheme.js","components/features/button/Button.js","components/features/navbar/Navbar.js","components/service/service.js","components/features/card/Card.js","components/features/header/Header.js","components/features/search/Search.js","components/features/forecastsCard/ForecastsCard.js","components/pages/Weather.js","components/pages/Favorites.js","components/features/appRouter/AppRouter.js","components/features/container/Container.js","App.js","reportWebVitals.js","redux/Reducers/themeReducer.js","redux/Reducers/favoriteReducer.js","redux/Reducers/cityReducer.js","redux/Reducers/forecastsReducer.js","redux/Reducers/Index.js","index.js"],"names":["CHANGE_THEME","CHANGE_CITY","UPDATE_FORCASTS","DEFAULT_FORCASTS","ADD_FAVORITE","DELETE_FAVORITE","ToggleTheme","dispatch","useDispatch","useState","theme","setTheme","ToggleButtonGroup","onChange","event","type","payload","ToggleButton","Button","favoriteCity","useSelector","state","cityReducer","id","className","Stack","direction","spacing","IconButton","onClick","console","log","color","fontSize","Navbar","to","getDailyForecasts","Key","fetch","process","then","res","json","catch","err","CardWrapper","city","Card","CardContent","Typography","gutterBottom","variant","component","WeatherText","LocalizedName","CardActions","size","Header","Search","chosenCity","setChosenCity","locationKey","setLocationKey","setCityList","weatherHandler","cities","cityListHandler","DailyForecasts","e","target","value","ForecastsCard","Temperature","date","Date","currentDay","toLocaleString","weekday","Maximum","IconPhrase","Minimum","Day","Value","Weather","forecasts","forecastsReducer","useEffect","map","key","Favorites","favoriteReducer","setList","mapCards","JSON","parse","localStorage","getItem","forEach","getCityWeather","currentWeather","AppRouter","exact","path","element","Container","themeReducer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","favoriteCities","setItem","stringify","clear","mapForecasts","defualtForecasts","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","require","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdb11be4.chunk.js","sourcesContent":["// theme\r\nexport const CHANGE_THEME = \"CHANGE_THEME\";\r\n\r\nexport const CHANGE_CITY = \"CHANGE_CITY\";\r\nexport const UPDATE_CITY = \"UPDATE_CITY\";\r\nexport const CHANGE_TEMP = \"CHANGE_TEMP\";\r\n\r\n// forecasts\r\nexport const UPDATE_FORCASTS = \"UPDATE_FORCASTS\";\r\nexport const DEFAULT_FORCASTS = \"DEFAULT_FORCASTS\";\r\n\r\n\r\n// favorite \r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const DELETE_FAVORITE = \"DELETE_FAVORITE\";\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport { CHANGE_THEME } from '../../../redux/Actions/types';\r\nexport const ToggleTheme = () => {\r\n    const dispatch = useDispatch();\r\n    const [theme, setTheme] = useState(true);\r\n    const handleChange = (event) => {\r\n        setTheme(!theme);\r\n        dispatch({ type: CHANGE_THEME, payload: theme })\r\n    };\r\n    return (\r\n        <ToggleButtonGroup\r\n            onChange={handleChange}\r\n        >\r\n            <ToggleButton >change theme</ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    );\r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Stack from '@mui/material/Stack';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_FAVORITE } from '../../../redux/Actions/types';\r\nexport const Button = () => {\r\n    const dispatch = useDispatch();\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n    const addCity = () => {\r\n        console.log(\"fires\");\r\n        dispatch({ type: ADD_FAVORITE, payload: favoriteCity })\r\n    }\r\n\r\n    return (\r\n        <div id=\"button\" className=\"button-container\" >\r\n            <Stack direction=\"row\" spacing={1}>\r\n                <IconButton onClick={() => addCity()} color=\"primary\" aria-label=\"add to shopping cart\">\r\n                    <FavoriteIcon fontSize='large' />\r\n                </IconButton>\r\n            </Stack>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { ADD_FAVORITE } from '../../../redux/Actions/types';\r\nimport { Link } from 'react-router-dom';\r\nimport { ToggleTheme } from '../toggleTheme/ToggleTheme';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button } from '../button/Button';\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <ToggleTheme />\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/Weather\"> Weather </Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/favorites\"> Favorites </Link>\r\n                </li>\r\n                <Button />\r\n            </ul>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\n","\r\nexport const getCityList = (city) => {\r\n    return fetch(`http://dataservice.accuweather.com//locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${city}&language=en-us HTTP/1.1`)\r\n        .then(res => res.json())\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const getCityWeather = ({ Key }) => {\r\n    return fetch(`http://dataservice.accuweather.com/currentconditions/v1/${Key}?apikey=${process.env.REACT_APP_API_KEY}&language=en-us&details=true`)\r\n        .then(res => res.json())\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const getDailyForecasts = (Key) => {\r\n    return fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${Key}?apikey=${process.env.REACT_APP_API_KEY}`)\r\n        .then(res => res.json())\r\n        .catch(err => console.log(err))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport const CardWrapper = ({ city }) => {\r\n    console.log(city);\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Card className=\"ForecastsCard\" id=\"favoriteCard\">\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {city.WeatherText}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {city.LocalizedName}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button size=\"small\">Share</Button>\r\n                    <Button size=\"small\">Learn More</Button>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../../styles/style.css';\r\n\r\nexport const Header = ({ favoriteCity }) => {\r\n    return (\r\n\r\n        <div className=\"text-container\">\r\n            <h1 className=\"header\">{favoriteCity.LocalizedName}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../../styles/style.css';\r\nimport { CHANGE_CITY, UPDATE_FORCASTS } from '../../../redux/Actions/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCityList, getCityWeather, getDailyForecasts } from '../../service/service';\r\nimport { AutoComplete } from '../autoComplete/AutoComplete';\r\nimport { CardWrapper } from '../card/Card';\r\nimport { Header } from '../header/Header';\r\nexport const Search = () => {\r\n    console.log(process.env.REACT_APP_API_KEY);\r\n    const [chosenCity, setChosenCity] = useState('Tel aviv');\r\n    const [locationKey, setLocationKey] = useState('');\r\n    const [cityList, setCityList] = useState([]);\r\n    const dispatch = useDispatch();\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n\r\n\r\n    const weatherHandler = () => {\r\n        console.log(chosenCity);\r\n        getCityList(chosenCity) // locationKey\r\n            .then(cities => cityListHandler(cities))\r\n            .then(({ DailyForecasts }) => dispatch({ type: UPDATE_FORCASTS, payload: DailyForecasts }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const cityListHandler = (cities) => {\r\n        setCityList(cities[0]);\r\n        console.log(cities);\r\n        dispatch({ type: CHANGE_CITY, payload: cities[0] })\r\n        setLocationKey(cities[0].Key)\r\n        return getDailyForecasts(locationKey)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <div>\r\n                <Header favoriteCity={favoriteCity} />\r\n                <div className=\"search-bar\">\r\n                    <input type=\"text\" onChange={(e) => { setChosenCity(e.target.value) }} />\r\n                    <input type=\"submit\" onClick={() => weatherHandler()} value=\"search\" />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport const ForecastsCard = ({ Temperature }) => {\r\n    const date = new Date(Temperature.currentDay).toLocaleString('en-us', { weekday: 'long' });\r\n    const { Maximum, Minimum } = Temperature.Temperature;\r\n    const { IconPhrase } = Temperature.Day;\r\n    console.log(Temperature.Day);\r\n    return (\r\n        <div className=\"ForecastsCard-container\">\r\n            <Card className=\"ForecastsCard\" >\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {date}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {IconPhrase}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                        {Maximum.Value}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../styles/style.css';\r\nimport { getDailyForecasts } from '../service/service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_FAVORITE } from '../../redux/Actions/types';\r\nimport { Search } from '../features/search/Search';\r\nimport { CardWrapper } from '../features/card/Card';\r\nimport { Button } from '../features/button/Button';\r\nimport { ForecastsCard } from '../features/forecastsCard/ForecastsCard';\r\nimport { cities } from '../../data/cities';\r\nimport { DEFAULT_FORCASTS } from '../../redux/Actions/types';\r\n\r\nexport const Weather = () => {\r\n    const city = useSelector(state => state.cityReducer);\r\n    const forecasts = useSelector(state => state.forecastsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const getForecasts = () => {\r\n        getDailyForecasts(city.Key)\r\n            .then(res => dispatch({ type: DEFAULT_FORCASTS, payload: res }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        console.log('fired')\r\n        getForecasts();\r\n    }, [])\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <Search />\r\n\r\n            <div className=\"card-container\">\r\n                {\r\n\r\n                    forecasts?.map((city, key) => <ForecastsCard key={key} Temperature={city} />)\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import '../styles/style.css'\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { CardWrapper } from '../features/card/Card';\r\nimport { Button } from '../features/button/Button';\r\nimport { getCityWeather } from '../service/service';\r\nexport const Favorites = () => {\r\n    const cities = useSelector(state => state.favoriteReducer);\r\n    const [list, setList] = useState([]);\r\n    const mapCards = () => {\r\n        const favoriteCities = JSON.parse(localStorage.getItem('favoriteCities'));\r\n        const updateCities = favoriteCities.forEach(city => {\r\n            getCityWeather(city.Key)\r\n                .then(currentWeather => currentWeather)\r\n                .catch(err => console.log(err))\r\n        });\r\n        return updateCities;\r\n    }\r\n    useEffect(() => {\r\n        setList(mapCards());\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Hi Favorites</h1>\r\n            <div className=\"card-container\">\r\n\r\n                {\r\n                    cities?.map((city, key) => <CardWrapper city={city} key={key} />)\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Routes, Route\r\n} from \"react-router-dom\";\r\nimport { Weather } from '../../pages/Weather';\r\nimport { Favorites } from '../../pages/Favorites';\r\nimport '../../styles/style.css';\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <>\r\n                    <Navbar />\r\n                    <Routes>\r\n                        <Route exact path=\"/\" element={<Weather />} />\r\n                        <Route exact path=\"/favorites\" element={<Favorites />} />\r\n                    </Routes>\r\n                </>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { AppRouter } from '../appRouter/AppRouter';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Container = () => {\r\n    const theme = useSelector(state => state.themeReducer.ToggleTheme);\r\n    return (\r\n        <div className={theme}>\r\n            <AppRouter />\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './components/styles/style.css';\nimport { Container } from './components/features/container/Container';\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_THEME } from \"../Actions/types\";\r\n\r\nconst themeReducer = (themeReducer = { ToggleTheme: 'light' }, action) => {\r\n\r\n  switch (action.type) {\r\n    case CHANGE_THEME:\r\n      console.log(action.payload);\r\n      if (action.payload) {\r\n        return { ToggleTheme: 'dark' };\r\n      }\r\n\r\n      return { ToggleTheme: 'light' };\r\n\r\n    default:\r\n      return themeReducer;\r\n  }\r\n};\r\n\r\nexport default themeReducer;","import { ADD_FAVORITE, DELETE_FAVORITE } from \"../Actions/types\";\r\n\r\nconst favoriteReducer = (favoriteCities = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_FAVORITE:\r\n            console.log(action.payload);\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify([...favoriteCities, action.payload]));\r\n            return [...favoriteCities, action.payload];\r\n        case DELETE_FAVORITE:\r\n            localStorage.clear();\r\n            return [];\r\n        default:\r\n            return favoriteCities;\r\n    }\r\n};\r\n\r\nexport default favoriteReducer;","import { CHANGE_CITY, CHANGE_TEMP } from \"../Actions/types\";\r\n\r\nconst cityReducer = (state = { LocalizedName: \"Tel Aviv\", Key: process.env.REACT_APP_DEFUALT_CITY, WeatherText: 'Mostly cloudy' }, action) => {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_CITY:\r\n            console.log(action.payload);\r\n            const { LocalizedName, Key, WeatherText } = action.payload;\r\n            return { LocalizedName, Key, WeatherText };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cityReducer;","import { UPDATE_FORCASTS, DEFAULT_FORCASTS } from \"../Actions/types\";\r\n\r\nconst forecastsReducer = (forecasts = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATE_FORCASTS:\r\n            const mapForecasts = action.payload.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return mapForecasts;\r\n        case DEFAULT_FORCASTS:\r\n            const defualtForecasts = action.payload.DailyForecasts.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return defualtForecasts;\r\n        default:\r\n            return forecasts;\r\n    }\r\n};\r\n\r\nexport default forecastsReducer;","import { combineReducers } from \"redux\";\r\nimport themeReducer from \"./themeReducer\";\r\nimport favoriteReducer from \"./favoriteReducer\";\r\nimport cityReducer from \"./cityReducer\";\r\nimport forecastsReducer from \"./forecastsReducer\";\r\n\r\nexport default combineReducers({\r\n  themeReducer,\r\n  favoriteReducer,\r\n  cityReducer,\r\n  forecastsReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './redux/Reducers/Index';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\nrequire('dotenv').config()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}