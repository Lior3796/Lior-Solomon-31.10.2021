{"version":3,"sources":["logo.svg","redux/actions/types.js","components/features/toggleTheme/ToggleTheme.js","components/features/button/Button.js","components/features/navbar/Navbar.js","components/service/service.js","components/features/header/Header.js","components/features/search/Search.js","components/features/forecastsCard/ForecastsCard.js","components/pages/Weather.js","components/features/card/Card.js","components/pages/Favorites.js","components/features/appRouter/AppRouter.js","components/features/container/Container.js","App.js","reportWebVitals.js","redux/reducers/favoriteReducer.js","redux/reducers/cityReducer.js","redux/reducers/forecastsReducer.js","redux/reducers/themeReducer.js","redux/reducers/Index.js","index.js"],"names":["CHANGE_THEME","CHANGE_CITY","UPDATE_FORCASTS","DEFAULT_FORCASTS","ADD_FAVORITE","DELETE_FAVORITE","RESET_FAVORITE","ToggleTheme","dispatch","useDispatch","useState","theme","setTheme","ToggleButtonGroup","onChange","event","type","payload","className","ToggleButton","color","size","Button","favoriteCity","useSelector","state","cityReducer","Stack","direction","spacing","IconButton","onClick","console","log","fontSize","Key","Navbar","to","getDailyForecasts","fetch","then","res","json","Header","favorite","setFavorite","useEffect","favoriteCities","JSON","parse","localStorage","getItem","filter","city","length","LocalizedName","Search","chosenCity","setChosenCity","setLocationKey","weatherHandler","cities","cityListHandler","DailyForecasts","catch","err","toast","value","e","target","replace","RegExp","isValidValue","ForecastsCard","Temperature","date","Date","currentDay","toLocaleString","weekday","Maximum","IconPhrase","Minimum","Day","Card","CardContent","Typography","gutterBottom","variant","component","Value","Weather","forecasts","forecastsReducer","map","key","CardWrapper","id","WeatherText","CardActions","Favorites","favoriteReducer","favorites","setFavorites","mapCards","forEach","getCityWeather","currentWeather","AppRouter","path","exact","element","Container","themeReducer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","setItem","stringify","filterdCities","process","mapForecasts","defualtForecasts","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70b79e05.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// theme\r\nexport const CHANGE_THEME = \"CHANGE_THEME\";\r\n\r\nexport const CHANGE_CITY = \"CHANGE_CITY\";\r\nexport const UPDATE_CITY = \"UPDATE_CITY\";\r\nexport const CHANGE_TEMP = \"CHANGE_TEMP\";\r\n\r\n// forecasts\r\nexport const UPDATE_FORCASTS = \"UPDATE_FORCASTS\";\r\nexport const DEFAULT_FORCASTS = \"DEFAULT_FORCASTS\";\r\n\r\n\r\n// favorite \r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const DELETE_FAVORITE = \"DELETE_FAVORITE\";\r\nexport const RESET_FAVORITE = \"RESET_FAVORITE\";\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport { CHANGE_THEME } from '../../../redux/actions/types';\r\nexport const ToggleTheme = () => {\r\n    const dispatch = useDispatch();\r\n    const [theme, setTheme] = useState(true);\r\n    const handleChange = (event) => {\r\n        setTheme(!theme);\r\n        dispatch({ type: CHANGE_THEME, payload: theme })\r\n    };\r\n    return (\r\n        <ToggleButtonGroup\r\n            onChange={handleChange}\r\n            className={theme ? \"toggle-container-dark\" : \"toggle-container-light\"}\r\n        >\r\n            <ToggleButton color=\"secondary\" size='large'>Change theme</ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    );\r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Stack from '@mui/material/Stack';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_FAVORITE, DELETE_FAVORITE } from '../../../redux/actions/types';\r\nexport const Button = () => {\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n    const dispatch = useDispatch();\r\n    const addFavoriteCity = () => {\r\n        console.log('fierd from add favorite city', favoriteCity)\r\n        dispatch({ type: ADD_FAVORITE, payload: favoriteCity })\r\n    }\r\n    const deleteFavoriteCity = () => {\r\n        dispatch({ type: DELETE_FAVORITE, payload: favoriteCity.Key })\r\n    }\r\n\r\n    return (\r\n        <div className=\"button-container\" >\r\n            <Stack direction=\"row\" spacing={1}>\r\n                <IconButton onClick={() => addFavoriteCity()} color=\"primary\" aria-label=\"add to shopping cart\">\r\n                    <FavoriteIcon fontSize='large' />\r\n                </IconButton>\r\n                <IconButton onClick={() => deleteFavoriteCity()} color=\"primary\" aria-label=\"add to shopping cart\">\r\n                    <DeleteIcon fontSize='large' />\r\n                </IconButton>\r\n            </Stack>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ToggleTheme } from '../toggleTheme/ToggleTheme';\r\nimport { Button } from '../button/Button';\r\n\r\nexport const Navbar = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar-container\">\r\n            <ToggleTheme />\r\n            <ul className='navbar-ul'>\r\n                <li className='navbar-li'>\r\n                    <Link to=\"/Lior-Solomon-31.10.2021\"> Weather </Link>\r\n                </li>\r\n                <li className='navbar-li'>\r\n                    <Link to=\"/Lior-Solomon-31.10.2021/favorites\"> Favorites </Link>\r\n                </li>\r\n                <Button />\r\n            </ul>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\n","\r\nexport const getCityList = (city) => {\r\n    return fetch(`http://dataservice.accuweather.com//locations/v1/cities/autocomplete?apikey=4jiV4kQw8qp9aKj7rTVgSPBcJJSGQ5zJ&q=${city}&language=en-us HTTP/1.1`)\r\n        .then(res => res.json())\r\n\r\n}\r\n\r\nexport const getCityWeather = ({ Key }) => {\r\n    return fetch(`http://dataservice.accuweather.com/currentconditions/v1/${Key}?apikey=4jiV4kQw8qp9aKj7rTVgSPBcJJSGQ5zJ&language=en-us&details=true`)\r\n        .then(res => res.json())\r\n\r\n}\r\n\r\nexport const getDailyForecasts = (Key) => {\r\n    return fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${Key}?apikey=4jiV4kQw8qp9aKj7rTVgSPBcJJSGQ5zJ`)\r\n        .then(res => res.json())\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../../styles/style.css';\r\nimport { DELETE_FAVORITE } from '../../../redux/actions/types'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nexport const Header = ({ favoriteCity }) => {\r\n    const [favorite, setFavorite] = useState('');\r\n    useEffect(() => {\r\n        let favoriteCities = JSON.parse(localStorage.getItem(\"favoriteCities\"));\r\n        if (favoriteCities) {\r\n            favoriteCities = favoriteCities.filter((city) => city.Key === favoriteCity.Key);\r\n            if (favoriteCities.length !== 0) {\r\n                setFavorite('Favorite city');\r\n            } else {\r\n                setFavorite('');\r\n            }\r\n        }\r\n        console.log(favoriteCities, \"Header componentes\");\r\n    }, [favoriteCity])\r\n    return (\r\n        <div className=\"text-container\">\r\n            <h1 className=\"header\">{favoriteCity.LocalizedName}</h1>\r\n            {favorite ? <h3>favorite</h3> : <></>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport '../../styles/style.css';\r\nimport { CHANGE_CITY, UPDATE_FORCASTS } from '../../../redux/actions/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCityList, getCityWeather, getDailyForecasts } from '../../service/service';\r\nimport { Header } from '../header/Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const Search = () => {\r\n    const [chosenCity, setChosenCity] = useState('');\r\n    const [locationKey, setLocationKey] = useState('');\r\n    const dispatch = useDispatch();\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n\r\n    const weatherHandler = () => {\r\n        getCityList(chosenCity) // locationKey\r\n            .then(cities => cityListHandler(cities))\r\n            .then(({ DailyForecasts }) => dispatch({ type: UPDATE_FORCASTS, payload: DailyForecasts }))\r\n            .catch(err => toast(`Cant get ${chosenCity} forecasts`))\r\n    }\r\n\r\n    const cityListHandler = (cities) => {\r\n        dispatch({ type: CHANGE_CITY, payload: cities[0] })\r\n        setLocationKey(cities[0].Key)\r\n    }\r\n\r\n    const isValidValue = (e) => {\r\n        let value = e.target.value;\r\n        value = value.replace(RegExp(/[^A-Za-z]/gi), \"\");\r\n        setChosenCity(value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <Header favoriteCity={favoriteCity} />\r\n            <div className=\"search-bar\">\r\n                <input value={chosenCity} onChange={(e) => isValidValue(e)} type=\"text\" />\r\n                <input type=\"submit\" onClick={() => weatherHandler()} value=\"search\" />\r\n                <ToastContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport const ForecastsCard = ({ Temperature }) => {\r\n    const date = new Date(Temperature.currentDay).toLocaleString('en-us', { weekday: 'long' });\r\n    const { Maximum, Minimum } = Temperature.Temperature;\r\n    const { IconPhrase } = Temperature.Day;\r\n    return (\r\n        <div className=\"ForecastsCard-container\">\r\n            <Card className=\"ForecastsCard\" >\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {date}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {IconPhrase}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                        {Maximum.Value}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../styles/style.css';\r\nimport { getDailyForecasts } from '../service/service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_FAVORITE, DEFAULT_FORCASTS, RESET_FAVORITE } from '../../redux/actions/types';\r\nimport { Search } from '../features/search/Search';\r\nimport { ForecastsCard } from '../features/forecastsCard/ForecastsCard';\r\n\r\n\r\nexport const Weather = () => {\r\n    const city = useSelector(state => state.cityReducer);\r\n    const forecasts = useSelector(state => state.forecastsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const getForecasts = () => {\r\n        getDailyForecasts(city.Key)\r\n            .then(res => dispatch({ type: DEFAULT_FORCASTS, payload: res }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    useEffect(() => {\r\n        getForecasts();\r\n    }, [city.Key])\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <Search />\r\n            <div className=\"card-container\">\r\n                {\r\n                    forecasts?.map((city, key) => <ForecastsCard key={key} Temperature={city} />)\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport '../../styles/style.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useDispatch } from 'react-redux';\r\nimport { CHANGE_CITY, UPDATE_FORCASTS, DEFAULT_FORCASTS } from '../../../redux/actions/types';\r\nimport { getCityList, getCityWeather, getDailyForecasts } from '../../service/service';\r\n\r\nexport const CardWrapper = ({ city }) => {\r\n    const dispatch = useDispatch();\r\n    const changeForecasts = () => {\r\n        console.log(city);\r\n        getDailyForecasts(city.Key)\r\n            .then((res) => dispatch({ type: UPDATE_FORCASTS, payload: res }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Card className=\"ForecastsCard\" id=\"favoriteCard\">\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {city.WeatherText}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" color=\"text.secondary\">\r\n                        <Typography gutterBottom variant=\"h3\" component=\"div\">\r\n                            {city.LocalizedName}\r\n                        </Typography>\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button onClick={() => changeForecasts()} size=\"small\">Click here </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import '../styles/style.css'\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { CardWrapper } from '../features/card/Card';\r\nimport { getCityWeather } from '../service/service';\r\nimport { Header } from '../features/header/Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nexport const Favorites = () => {\r\n    const cities = useSelector(state => state.favoriteReducer);\r\n    const [favorites, setFavorites] = useState([]);\r\n    const mapCards = () => {\r\n        const favoriteCities = JSON.parse(localStorage.getItem('favoriteCities'));\r\n        console.log(favoriteCities, \"list of favorite cities\");\r\n        if (favoriteCities) {\r\n            favoriteCities.forEach((city) => {\r\n                return getCityWeather(city)\r\n                    .then(currentWeather => setFavorites(currentWeather))\r\n                    .catch(() => toast(\"can't show favorites cities\"))\r\n            });\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        mapCards();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Header favoriteCity={{ LocalizedName: 'Favorite cities' }} />\r\n            {\r\n                favorites?.map((city, key) => <CardWrapper city={city} key={key} />)\r\n            }\r\n\r\n            <ToastContainer />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Routes, Route\r\n} from \"react-router-dom\";\r\nimport { Weather } from '../../pages/Weather';\r\nimport { Favorites } from '../../pages/Favorites';\r\nimport '../../styles/style.css';\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <>\r\n                    <Navbar />\r\n                    <Routes>\r\n                        <Route path=\"/\" exact element={<Weather />} />\r\n                        <Route path=\"/Lior-Solomon-31.10.2021\" exact element={<Weather />} />\r\n                        <Route path=\"/Lior-Solomon-31.10.2021/favorites\" exact element={<Favorites />} />\r\n                        <Route path=\"/favorites\" exact element={<Favorites />} />\r\n\r\n\r\n                    </Routes>\r\n                </>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { AppRouter } from '../appRouter/AppRouter';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Container = () => {\r\n    const theme = useSelector(state => state.themeReducer.ToggleTheme);\r\n    return (\r\n        <div className={theme}>\r\n            <AppRouter />\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './components/styles/style.css';\nimport { Container } from './components/features/container/Container';\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_FAVORITE, DELETE_FAVORITE, RESET_FAVORITE } from \"../actions/types\";\r\n\r\nconst favoriteReducer = (favoriteCities = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_FAVORITE:\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify([...favoriteCities, action.payload]));\r\n            return [...favoriteCities, action.payload];\r\n        case DELETE_FAVORITE:\r\n            const filterdCities = favoriteCities.filter(city => city.Key !== action.payload);\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify(filterdCities));\r\n            return filterdCities;\r\n        case RESET_FAVORITE:\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify([]));\r\n            return favoriteCities;\r\n        default:\r\n            return favoriteCities;\r\n    }\r\n};\r\n\r\nexport default favoriteReducer;","import { CHANGE_CITY, CHANGE_TEMP } from \"../actions/types\";\r\n\r\nconst cityReducer = (state = { LocalizedName: \"Tel Aviv\", Key: process.env.REACT_APP_DEFUALT_CITY, WeatherText: 'Mostly cloudy' }, action) => {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_CITY:\r\n            const { LocalizedName, Key, WeatherText } = action.payload;\r\n            return { LocalizedName, Key, WeatherText };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cityReducer;","import { UPDATE_FORCASTS, DEFAULT_FORCASTS } from \"../actions/types\";\r\n\r\nconst forecastsReducer = (forecasts = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATE_FORCASTS:\r\n            const mapForecasts = action.payload.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return mapForecasts;\r\n        case DEFAULT_FORCASTS:\r\n            console.log(action.payload.DailyForecasts);\r\n            const defualtForecasts = action.payload.DailyForecasts.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return defualtForecasts;\r\n        default:\r\n            return forecasts;\r\n    }\r\n};\r\n\r\nexport default forecastsReducer;","import { CHANGE_THEME } from \"../actions/types\";\r\n\r\nconst themeReducer = (theme = { ToggleTheme: 'light' }, action) => {\r\n\r\n  switch (action.type) {\r\n    case CHANGE_THEME:\r\n      console.log(action.payload);\r\n      if (action.payload) {\r\n        return { ToggleTheme: 'dark' };\r\n      }\r\n      return { ToggleTheme: 'light' };\r\n\r\n    default:\r\n      return theme;\r\n  }\r\n};\r\n\r\nexport default themeReducer;","import { combineReducers } from \"redux\";\r\nimport favoriteReducer from \"./favoriteReducer\";\r\nimport cityReducer from \"./cityReducer\";\r\nimport forecastsReducer from \"./forecastsReducer\";\r\nimport themeReducer from \"./themeReducer\";\r\nexport default combineReducers({\r\n  themeReducer,\r\n  favoriteReducer,\r\n  cityReducer,\r\n  forecastsReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './redux/reducers/Index';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}