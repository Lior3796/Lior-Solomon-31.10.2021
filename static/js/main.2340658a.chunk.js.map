{"version":3,"sources":["logo.svg","redux/actions/types.js","components/features/toggleTheme/ToggleTheme.js","components/features/button/Button.js","components/features/toggleUnit/ToggleUnit.js","components/features/navbar/Navbar.js","components/service/service.js","components/features/header/Header.js","components/features/search/Search.js","components/features/forecastsCard/ForecastsCard.js","components/pages/Weather.js","components/features/card/Card.js","components/pages/Favorites.js","components/features/appRouter/AppRouter.js","components/features/container/Container.js","App.js","reportWebVitals.js","redux/reducers/favoriteReducer.js","redux/reducers/cityReducer.js","redux/reducers/forecastsReducer.js","redux/reducers/themeReducer.js","redux/reducers/Index.js","index.js"],"names":["CHANGE_THEME","CHANGE_UNIT","CHANGE_CITY","UPDATE_FORCASTS","DEFAULT_FORCASTS","ADD_FAVORITE","DELETE_FAVORITE","RESET_FAVORITE","ToggleTheme","dispatch","useDispatch","useState","theme","setTheme","ToggleButtonGroup","onChange","type","payload","className","ToggleButton","color","size","Button","favoriteCity","useSelector","state","cityReducer","Stack","direction","spacing","IconButton","onClick","console","log","fontSize","Key","ToggleUnit","temp","setTemp","Navbar","to","getCityWeather","fetch","process","then","res","json","getDailyForecasts","Header","favorite","setFavorite","useEffect","favoriteCities","JSON","parse","localStorage","getItem","filter","city","length","getFavoriteCities","LocalizedName","Search","chosenCity","setChosenCity","setLocationKey","weatherHandler","cities","cityListHandler","DailyForecasts","catch","err","toast","value","e","target","replace","RegExp","isValidValue","ForecastsCard","Temperature","date","Date","currentDay","toLocaleString","weekday","Maximum","IconPhrase","Minimum","Day","Card","CardContent","Typography","gutterBottom","variant","component","Value","Weather","forecasts","forecastsReducer","map","key","CardWrapper","currentWeather","unit","themeReducer","toggleTemp","ApparentTemperature","Imperial","Metric","CardActions","Favorites","favoriteReducer","favorites","setFavorites","forEach","mapCards","AppRouter","path","exact","element","Container","toggleTheme","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","setItem","stringify","filterdCities","WeatherText","mapForecasts","defualtForecasts","toggle","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2340658a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// Toggle\r\nexport const CHANGE_THEME = \"CHANGE_THEME\";\r\nexport const CHANGE_UNIT = \"CHANGE_UNIT\";\r\n\r\n// city\r\nexport const CHANGE_CITY = \"CHANGE_CITY\";\r\nexport const UPDATE_CITY = \"UPDATE_CITY\";\r\nexport const CHANGE_TEMP = \"CHANGE_TEMP\";\r\n\r\n// forecasts\r\nexport const UPDATE_FORCASTS = \"UPDATE_FORCASTS\";\r\nexport const DEFAULT_FORCASTS = \"DEFAULT_FORCASTS\";\r\n\r\n\r\n// favorite \r\nexport const ADD_FAVORITE = \"ADD_FAVORITE\";\r\nexport const DELETE_FAVORITE = \"DELETE_FAVORITE\";\r\nexport const RESET_FAVORITE = \"RESET_FAVORITE\";\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\nimport { CHANGE_THEME, CHANGE_UNIT } from '../../../redux/actions/types';\r\nexport const ToggleTheme = () => {\r\n    const dispatch = useDispatch();\r\n    const [theme, setTheme] = useState(true);\r\n    const [temp, setTemp] = useState(true);\r\n    const handleChange = () => {\r\n        setTheme(!theme);\r\n        dispatch({ type: CHANGE_THEME, payload: theme })\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            onChange={handleChange}\r\n            className={theme ? \"toggle-container-dark\" : \"toggle-container-light\"}\r\n        >\r\n            <ToggleButton color=\"secondary\" size='large'>Change theme</ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    );\r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Stack from '@mui/material/Stack';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ADD_FAVORITE, DELETE_FAVORITE } from '../../../redux/actions/types';\r\nexport const Button = () => {\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n    const dispatch = useDispatch();\r\n    const addFavoriteCity = () => {\r\n        console.log('fierd from add favorite city', favoriteCity)\r\n        dispatch({ type: ADD_FAVORITE, payload: favoriteCity })\r\n    }\r\n    const deleteFavoriteCity = () => {\r\n        dispatch({ type: DELETE_FAVORITE, payload: favoriteCity.Key })\r\n    }\r\n\r\n    return (\r\n        <div className=\"button-container\" >\r\n            <Stack direction=\"row\" spacing={1}>\r\n                <IconButton onClick={() => addFavoriteCity()} color=\"primary\" aria-label=\"add to shopping cart\">\r\n                    <FavoriteIcon fontSize='large' />\r\n                </IconButton>\r\n                <IconButton onClick={() => deleteFavoriteCity()} color=\"primary\" aria-label=\"add to shopping cart\">\r\n                    <DeleteIcon fontSize='large' />\r\n                </IconButton>\r\n            </Stack>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button } from '@mui/material';\r\nimport { CHANGE_UNIT } from '../../../redux/actions/types';\r\nexport const ToggleUnit = () => {\r\n    const dispatch = useDispatch();\r\n    const [temp, setTemp] = useState(true);\r\n\r\n    const changeUnit = () => {\r\n        setTemp(!temp);\r\n        dispatch({ type: CHANGE_UNIT, payload: temp })\r\n    };\r\n    return (\r\n        <Button onClick={() => changeUnit()} size=\"small\">change Unit </Button>\r\n    );\r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ToggleTheme } from '../toggleTheme/ToggleTheme';\r\nimport { Button } from '../button/Button';\r\nimport { ToggleUnit } from '../toggleUnit/ToggleUnit';\r\nexport const Navbar = () => {\r\n\r\n    return (\r\n        <nav className=\"navbar-container\">\r\n            <ToggleTheme />\r\n            <ul className=\"navbar-ul\">\r\n                <li className=\"navbar-li\">\r\n                    <Link className=\"navbar-link\" to=\"/Lior-Solomon-7.11.2021\"> Weather </Link>\r\n                </li>\r\n                <li className=\"navbar-li\">\r\n                    <Link className=\"navbar-link\" to=\"/Lior-Solomon-7.11.2021/favorites\"> Favorites </Link>\r\n                </li>\r\n                <Button />\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","\r\nexport const getCityList = (city) => {\r\n    return fetch(`http://dataservice.accuweather.com//locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${city}&language=en-us HTTP/1.1`)\r\n        .then(res => res.json())\r\n\r\n}\r\n\r\nexport const getCityWeather = ({ Key }) => {\r\n    return fetch(`http://dataservice.accuweather.com/currentconditions/v1/${Key}?apikey=${process.env.REACT_APP_API_KEY}&language=en-us&details=true`)\r\n        .then(res => res.json())\r\n\r\n}\r\n\r\nexport const getDailyForecasts = (Key) => {\r\n    return fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${Key}?apikey=${process.env.REACT_APP_API_KEY}`)\r\n        .then(res => res.json())\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../../styles/style.css';\r\nexport const Header = ({ favoriteCity }) => {\r\n    const [favorite, setFavorite] = useState('');\r\n    const getFavoriteCities = () => {\r\n        let favoriteCities = JSON.parse(localStorage.getItem(\"favoriteCities\"));\r\n        if (favoriteCities) {\r\n            favoriteCities = favoriteCities.filter((city) => city.Key === favoriteCity.Key);\r\n            if (favoriteCities.length !== 0) {\r\n                setFavorite('Favorite city');\r\n            } else {\r\n                setFavorite('');\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => getFavoriteCities(), [favoriteCity]);\r\n\r\n    return (\r\n        <div className=\"text-container\">\r\n            <h1 className=\"header\">{favoriteCity.LocalizedName}</h1>\r\n            {favorite && <h4 className=\"header\">{favorite}</h4>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport '../../styles/style.css';\r\nimport { CHANGE_CITY, UPDATE_FORCASTS } from '../../../redux/actions/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCityList, getCityWeather, getDailyForecasts } from '../../service/service';\r\nimport { Header } from '../header/Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport const Search = () => {\r\n    const [chosenCity, setChosenCity] = useState('');\r\n    const [locationKey, setLocationKey] = useState('');\r\n    const dispatch = useDispatch();\r\n    const favoriteCity = useSelector(state => state.cityReducer);\r\n\r\n    const weatherHandler = () => {\r\n        getCityList(chosenCity) // locationKey\r\n            .then(cities => cityListHandler(cities))\r\n            .then(({ DailyForecasts }) => dispatch({ type: UPDATE_FORCASTS, payload: DailyForecasts }))\r\n            .catch(err => toast(`Cant get ${chosenCity} forecasts`))\r\n    }\r\n\r\n    const cityListHandler = (cities) => {\r\n        dispatch({ type: CHANGE_CITY, payload: cities[0] })\r\n        setLocationKey(cities[0].Key)\r\n    }\r\n\r\n    const isValidValue = (e) => {\r\n        let value = e.target.value;\r\n        value = value.replace(RegExp(/[^A-Z a-z]/gi), \"\");\r\n        setChosenCity(value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"search-container\">\r\n            <Header favoriteCity={favoriteCity} />\r\n            <div className=\"search-bar\">\r\n                <input className=\"search-input\" value={chosenCity} onChange={(e) => isValidValue(e)} type=\"text\" />\r\n                <input className=\"search-button\" type=\"submit\" onClick={() => weatherHandler()} value=\"search\" />\r\n                <ToastContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport const ForecastsCard = ({ Temperature }) => {\r\n    const date = new Date(Temperature.currentDay).toLocaleString('en-us', { weekday: 'long' });\r\n    const { Maximum, Minimum } = Temperature.Temperature;\r\n    const { IconPhrase } = Temperature.Day;\r\n    return (\r\n        <div className=\"ForecastsCard-container\">\r\n            <Card className=\"ForecastsCard\" >\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {date}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        {IconPhrase}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                        {Maximum.Value}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../styles/style.css';\r\nimport { getDailyForecasts } from '../service/service';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { DEFAULT_FORCASTS } from '../../redux/actions/types';\r\nimport { Search } from '../features/search/Search';\r\nimport { ForecastsCard } from '../features/forecastsCard/ForecastsCard';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nexport const Weather = () => {\r\n    const city = useSelector(state => state.cityReducer);\r\n    const forecasts = useSelector(state => state.forecastsReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const getForecasts = () => {\r\n        getDailyForecasts(city.Key)\r\n            .then(res => dispatch({ type: DEFAULT_FORCASTS, payload: res }))\r\n            .catch(() => toast(`cannot get forecasts`))\r\n    }\r\n    useEffect(() => {\r\n        getForecasts();\r\n    }, [city.Key])\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <Search />\r\n            <div className=\"card-container\">\r\n                {\r\n                    forecasts?.map((city, key) => <ForecastsCard key={key} Temperature={city} />)\r\n                }\r\n                <ToastContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../../styles/style.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UPDATE_FORCASTS, CHANGE_CITY } from '../../../redux/actions/types';\r\nimport { getDailyForecasts, getCityWeather } from '../../service/service';\r\nimport { ToggleUnit } from '../toggleUnit/ToggleUnit';\r\n\r\nexport const CardWrapper = ({ city, currentWeather }) => {\r\n    const dispatch = useDispatch();\r\n    const [temp, setTemp] = useState();\r\n    const unit = useSelector(state => state.themeReducer.toggleTemp);\r\n    console.log(unit)\r\n    const changeForecasts = () => {\r\n        getDailyForecasts(city.Key)\r\n            .then((res) => dispatch({ type: UPDATE_FORCASTS, payload: res }))\r\n            .then(() => dispatch({ type: CHANGE_CITY, payload: city }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const getWeather = () => {\r\n        getCityWeather(city)\r\n            .then((city) => {\r\n                const { Imperial, Metric } = city[0].ApparentTemperature;\r\n                setTemp({ Imperial, Metric });\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWeather();\r\n    }, [])\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Card className=\"ForecastsCard\">\r\n                <CardContent>\r\n                    <Typography variant=\"h6\" color=\"text.secondary\">\r\n                        <Typography gutterBottom variant=\"h3\" component=\"div\">\r\n                            {city.LocalizedName}\r\n                        </Typography>\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"div\" component=\"h6\">\r\n                        <Typography gutterBottom variant=\"h6\" component=\"small\">\r\n                            {unit}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"small\">\r\n                            {unit === \"Imperial\" ? temp?.Imperial?.Value : temp?.Metric?.Value}\r\n                        </Typography>\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Link to=\"/Lior-Solomon-31.10.2021\"><Button onClick={() => changeForecasts()} size=\"small\">Click here </Button></Link>\r\n                    <ToggleUnit />\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import '../styles/style.css'\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { CardWrapper } from '../features/card/Card';\r\nimport { getCityWeather } from '../service/service';\r\nimport { Header } from '../features/header/Header';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nexport const Favorites = () => {\r\n    const cities = useSelector(state => state.favoriteReducer);\r\n    const [favorites, setFavorites] = useState([{}]);\r\n    const mapCards = () => {\r\n        const favoriteCities = JSON.parse(localStorage.getItem('favoriteCities'));\r\n        console.log(favoriteCities, \"list of favorite cities\");\r\n        if (favoriteCities) {\r\n            favoriteCities.forEach((city) => {\r\n                return getCityWeather(city)\r\n                    .then(currentWeather => setFavorites([...favorites, currentWeather]))\r\n                    .catch(() => toast(\"can't show favorites cities\"))\r\n            });\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        mapCards();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Header favoriteCity={{ LocalizedName: 'Favorite cities' }} />\r\n            {\r\n                cities?.map((city, key) => <CardWrapper currentWeather={favorites} city={city} key={key} />)\r\n            }\r\n\r\n            <ToastContainer />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Routes, Route\r\n} from \"react-router-dom\";\r\nimport { Weather } from '../../pages/Weather';\r\nimport { Favorites } from '../../pages/Favorites';\r\nimport '../../styles/style.css';\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <>\r\n                <Navbar />\r\n                <Routes>\r\n                    <Route path=\"/\" exact element={<Weather />} />\r\n                    <Route path=\"/Lior-Solomon-7.11.2021\" exact element={<Weather />} />\r\n                    <Route path=\"/Lior-Solomon-7.11.2021/favorites\" exact element={<Favorites />} />\r\n                    <Route path=\"/favorites\" exact element={<Favorites />} />\r\n\r\n\r\n                </Routes>\r\n            </>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../../styles/style.css';\r\nimport { AppRouter } from '../appRouter/AppRouter';\r\nimport { Navbar } from '../navbar/Navbar';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Container = () => {\r\n    const theme = useSelector(state => state.themeReducer.toggleTheme);\r\n    console.log(theme)\r\n    return (\r\n        <div className={theme}>\r\n            <AppRouter />\r\n        </div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\r\nimport './components/styles/style.css';\r\nimport { Container } from './components/features/container/Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { ADD_FAVORITE, DELETE_FAVORITE, RESET_FAVORITE } from \"../actions/types\";\r\n\r\nconst favoriteReducer = (favoriteCities = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_FAVORITE:\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify([...favoriteCities, action.payload]));\r\n            return [...favoriteCities, action.payload];\r\n        case DELETE_FAVORITE:\r\n            const filterdCities = favoriteCities.filter(city => city.Key !== action.payload);\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify(filterdCities));\r\n            return filterdCities;\r\n        case RESET_FAVORITE:\r\n            localStorage.setItem(\"favoriteCities\", JSON.stringify([]));\r\n            return favoriteCities;\r\n        default:\r\n            return favoriteCities;\r\n    }\r\n};\r\n\r\nexport default favoriteReducer;","import { CHANGE_CITY, CHANGE_TEMP } from \"../actions/types\";\r\n\r\nconst cityReducer = (state = { LocalizedName: \"Tel Aviv\", Key: process.env.REACT_APP_DEFUALT_CITY, WeatherText: 'Mostly cloudy' }, action) => {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_CITY:\r\n            const { LocalizedName, Key, WeatherText } = action.payload;\r\n            return { LocalizedName, Key, WeatherText };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cityReducer;","import { UPDATE_FORCASTS, DEFAULT_FORCASTS } from \"../actions/types\";\r\n\r\nconst forecastsReducer = (forecasts = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATE_FORCASTS:\r\n            const mapForecasts = action.payload.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return mapForecasts;\r\n        case DEFAULT_FORCASTS:\r\n            console.log(action.payload.DailyForecasts);\r\n            const defualtForecasts = action.payload.DailyForecasts.map(({ Temperature, Date, Day }) => { return { Temperature, currentDay: Date, Day } });\r\n            return defualtForecasts;\r\n        default:\r\n            return forecasts;\r\n    }\r\n};\r\n\r\nexport default forecastsReducer;","import { CHANGE_THEME, CHANGE_UNIT } from \"../actions/types\";\r\n\r\nconst themeReducer = (toggle = { toggleTheme: 'light', toggleTemp: 'Imperial' }, action) => {\r\n\r\n  switch (action.type) {\r\n    case CHANGE_THEME:\r\n      console.log(action.payload);\r\n      if (action.payload) {\r\n        return { ...toggle, toggleTheme: 'dark' };\r\n      }\r\n      return { ...toggle, toggleTheme: 'light' };\r\n    case CHANGE_UNIT:\r\n      console.log(action.payload)\r\n      if (action.payload) {\r\n        console.log(action.payload)\r\n        return { ...toggle, toggleTemp: \"Imperial\" };\r\n      }\r\n      return { ...toggle, toggleTemp: \"Metric\" };\r\n\r\n    default:\r\n      return toggle;\r\n  }\r\n};\r\n\r\nexport default themeReducer;","import { combineReducers } from \"redux\";\r\nimport favoriteReducer from \"./favoriteReducer\";\r\nimport cityReducer from \"./cityReducer\";\r\nimport forecastsReducer from \"./forecastsReducer\";\r\nimport themeReducer from \"./themeReducer\";\r\nexport default combineReducers({\r\n  themeReducer,\r\n  favoriteReducer,\r\n  cityReducer,\r\n  forecastsReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './redux/reducers/Index';\r\n\r\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}